#include<iostream>
#include<conio.h>
#include<Windows.h>
#include<stdio.h>
#include <string>
using namespace std;
using namespace System;

void Define() {
	//TECLAS
#define arriba 72
#define abajo 80
#define izquierda 75
#define derecha 77
#define enter 13
#define escape 27
	//COLORES
#define colour Console::ForegroundColor
#define red ConsoleColor::Red
#define green ConsoleColor::Green
#define blue ConsoleColor::Blue
#define yellow ConsoleColor::DarkYellow
#define white ConsoleColor::White
}

const int initial_position_tablero_y = 5;
const int initial_position_info_juego_y = 3;
const int NRO_FICHAS_POR_JUGADOR = 12;
const string colores[3] = { "Azul", "Verde", "Amarillo" };

char ficha[19][33];

struct Info_Jugador {

	ConsoleColor color1;//CONDICIONAL DE COLOR DEL JUGADOR 1
	string name_color1 = "";//NOMBRE DE COLOR DEL JUGADOR 1
	ConsoleColor color2;//CONDICIONAL DE COLOR DEL JUGADOR 2
	string name_color2 = "";//NOMBRE DE COLOR DEL JUGADOR 2
	string name1;//NOMBRE DEL JUGADOR 1
	string name2;//NOMBRE DEL JUGADOR 2

} jugadores;
struct Info_Juego {

	int ficha1 = NRO_FICHAS_POR_JUGADOR;//CONTAR FICHAS DEL JUGADOR 1
	int ficha2 = NRO_FICHAS_POR_JUGADOR;//CONTAR FICHAS DEL JUGADOR 2
	int captura1 = 0;//CONTAR CAPTURAS DEL JUGADOR 1
	int captura2 = 0;//CONTAR CAPTURAS DEL JUGADOR 2
	int mover1; //CONTADOR DE MOVIMIENTO DEL JUGADOR 1
	int mover2; //CONTADOR DE MOVIMIENTO DEL JUGADOR 2
	int contador = 0;//CONTADOR GENARAL DE TURNOS FASE 2
	int contador1;//CONTADOR DE TURNOS DEL JUGADOR 1

} fase1, fase2;

//DISEÑOS VISUALES

void Logo_UPC() {

	int matriz[25][80] =
	{ { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Red; }
			cout << (char)219;
		}
		cout << endl;
	}
}
void colaboradores() {

	int matriz[25][80] = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0} };

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		Sleep(30);
	}

}
void creditos1() {

	int matriz[25][80] =
	{ {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };


	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		Sleep(20);
	}
}
void creditos2() {

	int matriz[25][80] =
	{ {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		Sleep(20);
	}
}
void creditos3() {

	int matriz[25][80] =
	{ {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0} };

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::White; }

			cout << (char)219;
		}
		Sleep(20);
	}

}

void Segga() {

	int matriz[25][80] = {
		{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
		{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
		{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1 },
		{ 0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0 },
		{ 0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,0,0,0,0,0,0,3,4,3,3,3,3,3,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,3,3,3,3,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,3,0,0,0,0,0,0,3,4,4,4,4,4,3,0,0,0,0,0,0,3,4,3,0,0,3,3,3,3,3,3,3,3,0,0,3,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,4,3,0,0,3,4,3,3,3,3,3,0,0,0,0,0,0,3,4,3,3,3,3,3,0,0,0,0,0,0,3,4,3,0,0,3,4,4,4,4,4,4,3,0,0,3,4,3,3,3,3,3,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,3,4,3,3,3,3,4,3,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,3,3,3,0,0,3,4,3,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0,0,3,4,3,0,0,0,0,0,0,0,3,4,3,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,4,3,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,3,3,3,0,0,3,4,3,3,3,3,3,3,3,3,3,4,3,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,3,0,0,3,4,4,4,4,4,4,4,4,4,4,4,3,0,0,3,4,3,0,0,0,0,3,4,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 0 + i);
			if (matriz[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkBlue; }
			if (matriz[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matriz[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkCyan; }
			if (matriz[i][j] == 4) { Console::ForegroundColor = ConsoleColor::Gray; }
			cout << (char)219;
		}
		Sleep(30);
	}

}
void Start_Game() {

	int matriz1[6][80] = {
		{ 2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,2 },
		{ 2,2,2,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 2,2,2,2,2,2,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,2,2,2,2,2,2 },
		{ 2,2,2,2,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,2 } };

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(25 + j, 26 + i);
			if (matriz1[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz1[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Blue; }
			if (matriz1[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Blue; }
			cout << char(219);
		}
	}
}
void Rules() {

	int matriz2[6][80] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,2 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,2,2,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,2 } };

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(25 + j, 26 + i);
			if (matriz2[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz2[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Blue; }
			if (matriz2[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Blue; }
			cout << char(219);
		}
	}
}
void Credits() {

	int matriz3[6][80] = {
		{ 0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,2,2 },
		{ 0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,2,2,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,2,2 } };

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(25 + j, 26 + i);
			if (matriz3[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz3[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Blue; }
			if (matriz3[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Blue; }
			cout << char(219);
		}
	}
}
void Exit() {

	int matriz4[6][80] = {
		{ 0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,2,2 },
		{ 0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,2,2,2,2,2,2 },
		{ 0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,2,2,2 },
		{ 0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2 } };

	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(25 + j, 26 + i);
			if (matriz4[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriz4[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Blue; }
			if (matriz4[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Blue; }
			cout << char(219);
		}
	}
}

void instrucciones() {

	system("cls"); colour = yellow;
	cout << "----------------------------------------------------[ INSTRUCCIONES ]---------------------------------------------------\n\n";
	cout << " En la FASE 1:\n"; Sleep(10);
	cout << " 1. Presione la tecla (enter) para colocar su ficha respectiva\n"; Sleep(10);
	cout << " 2. Con las teclas (A, W, S, D), se podra mover para cualquier casilla\n"; Sleep(10);
	cout << " En la FASE 2:\n"; Sleep(10);
	cout << " 1. Con las teclas (A, W, S, D), se podra mover para cualquier casilla\n"; Sleep(10);
	cout << " 2. Presione la tecla enter para la selleccion y colocacion de la ficha\n"; Sleep(50);
	cout << " 3. AL colocar una ficha, solo podra mover un espacio a una casilla libre\n"; Sleep(10);
	cout << " 3. Cuando no puedas moverte presione la tecla space para dar turno al siguiente jugador\n"; Sleep(50);
	cout << " 4. Recuerde seleccionar una casilla valida para mover\n"; Sleep(10);
	cout << " \n\n "; system("pause");
}
void reglas() {

	system("cls"); colour = yellow;
	cout << "-------------------------------------------------------[ REGLAS ]-------------------------------------------------------\n\n"; Sleep(50);
	cout << " Los dos jugadores, por turno, van colocando 2 peones sobre cualquier casilla vacia salvo la del centro.\n";				   Sleep(50);
	cout << " La casilla del centro estará vacía hasta la segunda fase del juego.\n";													   Sleep(50);
	cout << " El jugador que coloca sus 2 últimos peones es quien comienza la segunda fase.\n";											   Sleep(50);
	cout << " Alternativamente se va desplazando un peón a cualquier casilla contigua libre,\n";										   Sleep(50);
	cout << " comprendida la del centro, en vertical u horizontal, pero no en diagonal.\n";												   Sleep(50);
	cout << " La captura se efecta por interceptación (encerrar un peón adversario entre 2 peones). Un\n";								   Sleep(50);
	cout << " jugador puede continuar jugado tanto tiempo como tenga la posibilidad de capturar peones.\n";								   Sleep(50);
	cout << " Existe la obligación de comer si se tiene la posibilidad. Un peon que se coloca voluntariamente\n";						   Sleep(50);
	cout << " entre dos peones enemigos no es capturado, salvo si una de las piezas enemigas se retira y vuelve.\n";					   Sleep(50);
	cout << " En la casilla central un peón es invulnerable.\n";																		   Sleep(50);
	cout << " Si todos los peones de un jugador estan bloqueados, su adversario debe volver a jugar y ofrecerle una abertura.\n";		   Sleep(50);
	cout << "\n\n ";  system("pause");
}

void GANADOR_1() {

	//PARTE 1
	system("cls");
	int matrizA[25][80] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,3,3,1,1,1,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,1,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 10 + i);
			if (matrizA[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizA[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizA[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizA[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkCyan; }
			if (matrizA[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizA[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizA[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
	}
	//PARTE 2
	int matrizB[25][80] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,1,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
		{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
		{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 10 + i);
			if (matrizB[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizB[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizB[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizB[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkCyan; }
			if (matrizB[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizB[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizB[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		cout << endl;
	}
	//PARTE 3
	int matrizC[25][80] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,3,3,1,1,1,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,1,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0 },
		{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
		{ 0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 10 + i);
			if (matrizC[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizC[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizC[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizC[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkCyan; }
			if (matrizC[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizC[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizC[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
	}
	//PARTE 4
	int matrizD[25][80] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,1,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,1,1,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 10 + i);
			if (matrizD[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizD[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizD[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizD[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkCyan; }
			if (matrizD[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizD[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizD[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
	}
}
void GANADOR_2() {

	system("cls");
	int matriza[25][80] = { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,1,3,1,1,1,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 5 + i);
			if (matriza[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matriza[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matriza[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matriza[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkGreen; }
			if (matriza[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matriza[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matriza[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		cout << endl;
	}

	int matrizb[25][80] = { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
	{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
	{ 0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 5 + i);
			if (matrizb[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizb[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizb[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizb[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkGreen; }
			if (matrizb[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizb[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizb[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		cout << endl;
	}

	int matrizc[25][80] = { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,1,3,1,1,1,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0 },
	{ 0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
	{ 0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 5 + i);
			if (matrizc[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizc[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizc[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizc[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkGreen; }
			if (matrizc[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizc[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizc[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		cout << endl;
	};

	int matrizd[25][80] = { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,1,1,1,1,1,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,3,1,1,1,1,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,1,1,1,3,3,3,1,1,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,6,6,6,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,0,0,6,0,6,0,6,6,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,0,6,0,6,6,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,6,0,0,6,0,6,0,6,0,6,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,6,6,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,6,6,0,0,0,6,6,6,0,6,0,0,6,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

	Sleep(1000);

	for (int i = 0; i < 25; i++) {
		for (int j = 0; j < 80; j++) {
			Console::SetCursorPosition(20 + j, 5 + i);
			if (matrizd[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; }
			if (matrizd[i][j] == 1) { Console::ForegroundColor = ConsoleColor::DarkYellow; }
			if (matrizd[i][j] == 2) { Console::ForegroundColor = ConsoleColor::Cyan; }
			if (matrizd[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkGreen; }
			if (matrizd[i][j] == 4) { Console::ForegroundColor = ConsoleColor::DarkRed; }
			if (matrizd[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Red; }
			if (matrizd[i][j] == 6) { Console::ForegroundColor = ConsoleColor::White; }
			cout << (char)219;
		}
		cout << endl;
	}
}
void MOSTRAR_GANADOR() {

	system("cls");
	if (fase2.captura1 == NRO_FICHAS_POR_JUGADOR) {
		//GANA JUGADOR 1
		GANADOR_1();
	}
	if (fase2.captura2 == NRO_FICHAS_POR_JUGADOR) {
		//GANA JUGADOR 2
		GANADOR_2();
	}
}

//LOGICA DEL JUEGO

void llenar_Fichas() {

	for (int i = 0; i < 19; i++) {

		for (int j = 0; j < 33; j++) {
			if (i == 6 && j == 22) ficha[i][j] = char(04); // FICHA EN EL CENTRO DEL LADO SUPERIOR
			else if (i == 18 && j == 22) ficha[i][j] = char(04); // FICHA EN EL CENTRO DEL LADO INFERIOR
			else if (i == 12 && j == 12) ficha[i][j] = char(05); // FICHA EN EL CENTRO DEL LADO IZQUIERDO
			else if (i == 12 && j == 32) ficha[i][j] = char(05); // FICHA EN EL CENTRO DEL LADO DERECHO
			else if (i == 12 && j == 22) ficha[i][j] = char(88); // FICHA EN EL CENTRO DEL TABLERO
			else ficha[i][j] = char(32);
		}
	}
}
void cuadrado(ConsoleColor color, int* x, int* y) {

	colour = color;
	Console::SetCursorPosition(*x + 10, *y + 5);
	cout << char(218) << char(196) << char(196) << char(196) << char(191);
	Console::SetCursorPosition(*x + 10, *y + 6);
	cout << char(179) << char(32);

	if (ficha[*y - initial_position_tablero_y + 6][*x + 12] == char(04)) { colour = jugadores.color1; }
	if (ficha[*y - initial_position_tablero_y + 6][*x + 12] == char(05)) { colour = jugadores.color2; }

	cout << ficha[*y - initial_position_tablero_y + 6][*x + 12];

	colour = color;
	cout << char(32) << char(179);
	Console::SetCursorPosition(*x + 10, *y + 7);
	cout << char(192) << char(196) << char(196) << char(196) << char(217);
}

void MOSTRAR_TABLERO(int* x, int* y) {

	Console::SetCursorPosition(0, 0); colour = white;
	cout << "\n------------------[ SEEGA ]---------------------------------------------------------------------------------------------\n";
	colour = red;
	cout << "________________________________________________________________________________________________________________________";
	Console::SetCursorPosition(0, *y + 21); Sleep(50); colour = white;
	cout << "________________________________________________________________________________________________________________________";

	for (int i = 1; i <= 5; i++) {

		Console::SetCursorPosition(7 + (i * 5), *y + 4); cout << i;
		Console::SetCursorPosition(8, *y + 3 + (i * 3)); cout << i;
	}

	//TABLERO
	for (int i = 0; i < 5; i++) {

		for (int j = 0; j < 5; j++) {

			if (i == 2 && j == 2) {
				colour = white; cuadrado(colour, x, y);
			}
			else {
				colour = red; cuadrado(colour, x, y);
			}
			*x += 5; Sleep(50);
		}
		cout << endl; *x = 0; *y += 3;
	}
	Console::SetCursorPosition(0, 29); Sleep(50); colour = white;
	cout << "________________________________________________________________________________________________________________________";
	Console::SetCursorPosition(0, 32); Sleep(50); colour = red;
	cout << "------------------------------------------------------------------------------------------------------------------------";
}

void INGRESO_DATOS(int nro_jugador) {

	cout << "\n------------------[ DATOS ]---------------------------------------------------------------------------------------------\n";
	Console::SetCursorPosition(0, 14);
	cout << "\n________________________________________________________________________________________________________________________";
	Console::SetCursorPosition(0, 2); cout << "\n [ JUGADOR " << nro_jugador << " ]\n\n";
	cout << " NOMBRE:\t"; getline(cin, nro_jugador == 1 ? jugadores.name1 : jugadores.name2);
	cout << "\n COLOR DE FICHA:\n\n";
	int indice = 0, nro_lista = 0;
	string lista_colores_disponibles[3];
	while (indice < 3) {
		if (jugadores.name_color1 != colores[indice]) {
			cout << " " << nro_lista + 1 << ". " << colores[indice] << endl;
			lista_colores_disponibles[nro_lista] = colores[indice];
			nro_lista++;
		}
		indice++;
	}

	int opcion = 0;
	do {
		cout << "\n Opcion:\t";
		cin >> opcion;
		cin.clear();
		cin.ignore(1000, '\n');
	} while (opcion <= 0 || opcion > nro_lista);

	if (nro_jugador == 1) {
		jugadores.name_color1 = lista_colores_disponibles[opcion - 1];
		if (jugadores.name_color1 == "Azul") jugadores.color1 = blue;
		if (jugadores.name_color1 == "Verde") jugadores.color1 = green;
		if (jugadores.name_color1 == "Amarillo") jugadores.color1 = yellow;

	}
	else {
		jugadores.name_color2 = lista_colores_disponibles[opcion - 1];
		if (jugadores.name_color2 == "Azul") jugadores.color2 = blue;
		if (jugadores.name_color2 == "Verde") jugadores.color2 = green;
		if (jugadores.name_color2 == "Amarillo") jugadores.color2 = yellow;
	}
	system("cls");
}

void DATOS() {

	INGRESO_DATOS(1);
	INGRESO_DATOS(2);
}

void MOSTRAR_DATOS(int fase) {

	//FASE 1 DEL JUEGO
	if (fase == 1) {

		//JUGADOR 1 ---------------------------------------------------------------------------------------------------------------------------------------------||
		colour = white;
		if (fase1.contador % 2 == 0) {
			Console::SetCursorPosition(43, initial_position_info_juego_y + 9); colour = jugadores.color1; cout << "\20";
			Console::SetCursorPosition(43, initial_position_info_juego_y + 16); cout << " ";
		}
		Console::SetCursorPosition(45, initial_position_info_juego_y + 9); cout << " [ JUGADOR 1 ]-------------------------------------------------------------";
		Console::SetCursorPosition(45, initial_position_info_juego_y + 11); cout << " TURNO DE: " + jugadores.name1;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 12); cout << " CANTIDAD DE FICHAS:  " << ((fase1.ficha1 < 10) ? "0" : "") << fase1.ficha1;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 13); cout << " FICHA: " << char(04);
		Console::SetCursorPosition(86, initial_position_info_juego_y + 12); cout << " COLOR SELECCIONADO: " << jugadores.name_color1;
		//JUGADOR 2 ---------------------------------------------------------------------------------------------------------------------------------------------||
		colour = white;
		if (fase1.contador % 2 != 0) {
			Console::SetCursorPosition(43, initial_position_info_juego_y + 16); colour = jugadores.color2; cout << "\20";
			Console::SetCursorPosition(43, initial_position_info_juego_y + 9); cout << " ";
		}
		Console::SetCursorPosition(45, initial_position_info_juego_y + 16); cout << " [ JUGADOR 2 ]------------------------------------------------------------";
		Console::SetCursorPosition(45, initial_position_info_juego_y + 18); cout << " TURNO DE: " + jugadores.name2;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 19); cout << " CANTIDAD DE FICHAS:  " << ((fase1.ficha2 < 10) ? "0" : "") << fase1.ficha2;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 20); cout << " FICHA: " << char(05);
		Console::SetCursorPosition(86, initial_position_info_juego_y + 19); cout << " COLOR SELECCIONADO: " << jugadores.name_color2;
	}
	//FASE 2 DEL JUEGO
	if (fase == 2) {

		//JUGADOR 1 ---------------------------------------------------------------------------------------------------------------------------------------------||
		colour = white;
		if (fase2.contador % 2 != 0) {
			Console::SetCursorPosition(43, initial_position_info_juego_y + 9); colour = jugadores.color1; cout << "\20";
			Console::SetCursorPosition(43, initial_position_info_juego_y + 16); cout << " ";
		}
		Console::SetCursorPosition(45, initial_position_info_juego_y + 9); cout << " [ JUGADOR 1 ]-------------------------------------------------------------";
		Console::SetCursorPosition(45, initial_position_info_juego_y + 11); cout << " TURNO DE: " + jugadores.name1;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 12); cout << " CANTIDAD DE FICHAS:  " << ((fase2.ficha1 < 10) ? "0" : "") << fase2.ficha1;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 13); cout << " CAPTURAS: " << NRO_FICHAS_POR_JUGADOR - fase2.ficha2;
		Console::SetCursorPosition(86, initial_position_info_juego_y + 11); cout << " CANTIDAD DE MOVIMIENTOS: " << fase2.mover1 << "              ";
		Console::SetCursorPosition(86, initial_position_info_juego_y + 12); cout << " COLOR SELECCIONADO: " << jugadores.name_color1;
		Console::SetCursorPosition(86, initial_position_info_juego_y + 13); cout << " FICHA: " << char(04);
		//JUGADOR 2 ---------------------------------------------------------------------------------------------------------------------------------------------||
		colour = white;
		if (fase2.contador % 2 == 0) {
			Console::SetCursorPosition(43, initial_position_info_juego_y + 16); colour = jugadores.color2; cout << "\20";
			Console::SetCursorPosition(43, initial_position_info_juego_y + 9); cout << " ";
		}
		Console::SetCursorPosition(45, initial_position_info_juego_y + 16); cout << " [ JUGADOR 2 ]------------------------------------------------------------";
		Console::SetCursorPosition(45, initial_position_info_juego_y + 18); cout << " TURNO DE: " + jugadores.name2;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 19); cout << " CANTIDAD DE FICHAS:  " << ((fase2.ficha2 < 10) ? "0" : "") << fase2.ficha2;
		Console::SetCursorPosition(45, initial_position_info_juego_y + 20); cout << " CAPTURAS: " << NRO_FICHAS_POR_JUGADOR - fase2.ficha1;
		Console::SetCursorPosition(86, initial_position_info_juego_y + 18); cout << " CANTIDAD DE MOVIMIENTOS: " << fase2.mover2 << "               ";
		Console::SetCursorPosition(86, initial_position_info_juego_y + 19); cout << " COLOR SELECCIONADO: " << jugadores.name_color2;
		Console::SetCursorPosition(86, initial_position_info_juego_y + 20); cout << " FICHA: " << char(05);
	}
}

void MOSTRAR_VALIDACIONES(string mensaje) {
	colour = red;
	Console::SetCursorPosition(0, 23 + initial_position_tablero_y);
	cout << mensaje;
}

void FICHAS(int* x, int* y, char tecla, int* cont1) {

	Console::SetCursorPosition(*x, *y + initial_position_tablero_y);

	//GUARDAR Y MOSTRAR FICHA
	if (*cont1 <= 2) {
		//JUGADOR 1
		ficha[*y][*x] = char(04); colour = jugadores.color1; fase1.ficha1--;//CONTAR SUS FICHAS
		if (*x == 22 && *y == 12) { colour = white; ficha[*y][*x] = char(88); *cont1 = *cont1 - 1; }

		cout << ficha[*y][*x];
		if (*cont1 == 2) { fase1.contador++; }
	}
	else {
		//JUGADOR 2
		ficha[*y][*x] = char(05); colour = jugadores.color2; fase1.ficha2--;//CONTAR SUS FICHAS
		if (*x == 22 && *y == 12) { colour = white; ficha[*y][*x] = char(88); *cont1 = *cont1 - 1; }

		cout << ficha[*y][*x];
		if (*cont1 == 4) { *cont1 = 0; fase1.contador++; }
	}
	fase1.contador1++;//CONTAR TURNOS
}

void CAPTURAR(int* x, int* y, char ficha_actual_seleccionada) {

	//JUGADOR 1 -------------------------------------------------------------------------------------------------------||
	bool capturo_ficha = false;
	if (ficha_actual_seleccionada == char(04)) {
		//FICHA A LA DERECHA
		if (!(*x + 5 == 22 && *y == 12) && ficha[*y][*x + 5] == char(05) && ficha[*y][*x + 10] == char(04)) {
			ficha[*y][*x + 5] = char(32);
			fase2.ficha2--; fase2.captura1++;
			Console::SetCursorPosition(*x + 5, *y + initial_position_tablero_y); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A LA IZQUIERDA
		if (!(*x - 5 == 22 && *y == 12) && ficha[*y][*x - 5] == char(05) && ficha[*y][*x - 10] == char(04)) {
			ficha[*y][*x - 5] = char(32);
			fase2.ficha2--; fase2.captura1++;
			Console::SetCursorPosition(*x - 5, *y + initial_position_tablero_y); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A LA ABAJO
		if (!(*x == 22 && *y + 3 == 12) && ficha[*y + 3][*x] == char(05) && ficha[*y + 6][*x] == char(04)) {
			ficha[*y + 3][*x] = char(32);
			fase2.ficha2--; fase2.captura1++;
			Console::SetCursorPosition(*x, *y + initial_position_tablero_y + 3); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A LA ARRIBA
		if (!(*x == 22 && *y - 3 == 12) && ficha[*y - 3][*x] == char(05) && ficha[*y - 6][*x] == char(04)) {
			ficha[*y - 3][*x] = char(32);
			fase2.ficha2--; fase2.captura1++;
			Console::SetCursorPosition(*x, *y + initial_position_tablero_y - 3); cout << char(32);
			capturo_ficha = true;
		}
	}
	//JUGADOR 2 --------------------------------------------------------------------------------------------------------||
	else {
		//FICHA A LA DERECHA
		if (!(*x + 5 == 22 && *y == 12) && ficha[*y][*x + 5] == char(04) && ficha[*y][*x + 10] == char(05)) {
			ficha[*y][*x + 5] = char(32);
			fase2.ficha1--; fase2.captura2++;
			Console::SetCursorPosition(*x + 5, *y + initial_position_tablero_y); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A LA IZQUIERDA
		if (!(*x - 5 == 22 && *y == 12) && ficha[*y][*x - 5] == char(04) && ficha[*y][*x - 10] == char(05)) {
			ficha[*y][*x - 5] = char(32);
			fase2.ficha1--; fase2.captura2++;
			Console::SetCursorPosition(*x - 5, *y + initial_position_tablero_y); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A ABAJO
		if (!(*x == 22 && *y + 3 == 12) && ficha[*y + 3][*x] == char(04) && ficha[*y + 6][*x] == char(05)) {
			ficha[*y + 3][*x] = char(32);
			fase2.ficha1--; fase2.captura2++;
			Console::SetCursorPosition(*x, *y + initial_position_tablero_y + 3); cout << char(32);
			capturo_ficha = true;
		}
		//FICHA A ARRIBA
		if (!(*x == 22 && *y - 3 == 12) && ficha[*y - 3][*x] == char(04) && ficha[*y - 6][*x] == char(05)) {
			ficha[*y - 3][*x] = char(32);
			fase2.ficha1--; fase2.captura2++;
			Console::SetCursorPosition(*x, *y + initial_position_tablero_y - 3); cout << char(32);
			capturo_ficha = true;
		}
	}
	if (capturo_ficha)fase2.contador--;

}

void MOVIMIENTO(int* x, int* y, char tecla) {

	//FASE 1
	if (tecla == 'W') {
		//ARRIBA
		*y -= 3; if (*y < 6) { *y += 3; }
		Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << char(24);
	}
	if (tecla == 'S') {
		//ABAJO
		*y += 3; if (*y > 18) { *y -= 3; }
		Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << char(25);
	}
	if (tecla == 'A') {
		//IZQUIERDA
		*x -= 5; if (*x < 12) { *x += 5; }
		Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << char(174);
	}
	if (tecla == 'D') {
		//DERECHA
		*x += 5; if (*x > 32) { *x -= 5; }
		Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << char(175);
	}

}

void MOVIMIENTO_FICHA_SELECCIONADA(int* x_selection, int* y_selection, int* x_new_position, int* y_new_position, char tecla) {

	//FASE 2
	if (tecla == 'W') {
		//ARRIBA
		*y_new_position -= 3;
		if ((*x_new_position == *x_selection - 5 || *x_new_position == *x_selection + 5) && *y_new_position == *y_selection - 3) *y_new_position += 3;
		else if (*y_new_position < *y_selection - 3 || *y_new_position < 6) *y_new_position += 3;
		Console::SetCursorPosition(*x_new_position, *y_new_position + initial_position_tablero_y); cout << char(24);
	}
	if (tecla == 'S') {
		//ABAJO
		*y_new_position += 3;
		if ((*x_new_position == *x_selection - 5 || *x_new_position == *x_selection + 5) && *y_new_position == *y_selection + 3) *y_new_position -= 3;
		else if (*y_new_position > *y_selection + 3 || *y_new_position > 18) { *y_new_position -= 3; }
		Console::SetCursorPosition(*x_new_position, *y_new_position + initial_position_tablero_y); cout << char(25);
	}
	if (tecla == 'A') {
		//IZQUIERDA
		*x_new_position -= 5;
		if ((*y_new_position == *y_selection - 3 || *y_new_position == *y_selection + 3) && *x_new_position == *x_selection - 5) *x_new_position += 5;
		else if (*x_new_position < *x_selection - 5 || *x_new_position < 12) { *x_new_position += 5; }
		Console::SetCursorPosition(*x_new_position, *y_new_position + initial_position_tablero_y); cout << char(174);
	}
	if (tecla == 'D') {
		//DERECHA
		*x_new_position += 5;
		if ((*y_new_position == *y_selection - 3 || *y_new_position == *y_selection + 3) && *x_new_position == *x_selection + 5) *x_new_position -= 5;
		else if (*x_new_position > *x_selection + 5 || *x_new_position > 32) { *x_new_position -= 5; }
		Console::SetCursorPosition(*x_new_position, *y_new_position + initial_position_tablero_y); cout << char(175);
	}

}

bool PUEDE_HACER_MOVIMIENTO(char jugador) {

	bool tiene_movimientos = false;
	for (int i = 0; i < 19; i++) {
		for (int j = 0; j < 33; j++) {
			if (ficha[i][j] == jugador) {
				//TIENE ESPACIO LIBRE ARRIBA
				if (i - 3 >= 6 && ficha[i - 3][j] == char(32)) { tiene_movimientos = true; break; }
				//TIENE ESPACIO LIBRE ABAJO
				else if (i + 3 <= 18 && ficha[i + 3][j] == char(32)) { tiene_movimientos = true; break; }
				//TIENE ESPACIO LIBRE DERECHA
				else if (j + 5 <= 32 && ficha[i][j + 5] == char(32)) { tiene_movimientos = true; break; }
				//TIENE ESPACIO LIBRE IZQUIERDA
				else if (j - 5 >= 12 && ficha[i][j - 5] == char(32)) { tiene_movimientos = true; break; }
			}
		}
	}
	return tiene_movimientos;
}

void FASE_1(int* x, int* y) {
	colour = red;
	Console::SetCursorPosition(42, 9);
	cout << "[ PRIMERA FASE DEL JUEGO ]----------------------------------------------------";
	Console::SetCursorPosition(0, 3); colour = white; colour = white;
	cout << "\n Ubicar las fichas en el tablero. Cada jugador utilice la teclas A, W, D y S para ubicar en el tablero la posicion donde";
	cout << "\n quieren colocar su ficha, y usar la tecla ENTER para confirmar la posicion.";
	colour = red;
	cout << "\n________________________________________________________________________________________________________________________";

	char tecla; *x = 12, * y = 6; int* cont1; cont1 = new int; *cont1 = 0;
	Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << char(32);
	fase1.contador1 = 4; fase1.ficha1 = fase1.ficha1 - 2; fase1.ficha2 = fase1.ficha2 - 2;

	while (true) {
		//JUGAR FASE 1
		MOSTRAR_DATOS(1);
		tecla = _getch(); tecla = toupper(tecla);

		if (tecla == 13) {
			Console::SetCursorPosition(0, 23 + initial_position_tablero_y);
			cout << "                                                                                     ";
			//RELLENAR
			if (!(*x == 22 && *y == 12)) {
				if (ficha[*y][*x] == char(32)) {
					*cont1 = *cont1 + 1;
					FICHAS(x, y, tecla, cont1);
				}
				else MOSTRAR_VALIDACIONES(" NO PUEDE COLOCAR UNA FICHA SOBRE LA CASILLA QUE YA ESTA OCUPADA");
			}
			else MOSTRAR_VALIDACIONES(" NO PUEDE COLOCAR UNA FICHA EN LA CASILLA DEL MEDIO DEL TABLERO");
		}

		if (tecla != 13) {
			//MOVER
			if (*x == 22 && *y == 12) { colour = white; ficha[*y][*x] = char(88); }
			if (ficha[*y][*x] == char(04)) { colour = jugadores.color1; }
			if (ficha[*y][*x] == char(05)) { colour = jugadores.color2; }

			Console::SetCursorPosition(*x, *y + initial_position_tablero_y);
			cout << ficha[*y][*x]; colour = white; MOVIMIENTO(x, y, tecla);
		}

		if (fase1.contador1 > (NRO_FICHAS_POR_JUGADOR * 2 - 1)) { MOSTRAR_DATOS(1); break; }

	}
	colour = red;
	Console::SetCursorPosition(0, 23 + initial_position_tablero_y); Sleep(50);
	cout << " FICHAS COLOCADAS, JUGADORES LISTOS!!!!\n\n\n "; colour = white;
	system("pause");
}

void FASE_2(int* x, int* y) {

	Console::SetCursorPosition(42, 9); colour = red;
	cout << "[ SEGUNDA FASE DEL JUEGO ]---------------------------------------------------";
	Console::SetCursorPosition(0, 3); colour = white;
	cout << "\n Cada jugador seleccione y deselecciona su ficha con la tecla ENTER para mover a un espacio libre, luego de ubicar su nu";
	cout << "\n eva posicion, con la tecla ENTER confirmara esa nueva posicion para colocar su respectiva ficha.";
	Console::SetCursorPosition(0, 23 + initial_position_tablero_y);
	cout << "                                                                                     ";
	Console::SetCursorPosition(0, 26 + initial_position_tablero_y);
	cout << "                                                                                     ";

	ficha[12][22] = char(32);
	int* middle_position_x = new int; *middle_position_x = 10;
	int* middle_position_y = new int; *middle_position_y = 6 + initial_position_tablero_y;
	cuadrado(white, middle_position_x, middle_position_y);

	char tecla; *x = 12, * y = 6;

	int* temp_position_x = new int;  *temp_position_x = 0;
	int* temp_position_y = new int; *temp_position_y = 0;
	char jugador; bool esta_ficha_seleccionada = false;

	while (true) {
		MOSTRAR_DATOS(2);

		//VALIDAR SI JUGADOR PUEDE HACER ALGUNA MOVIMIENTO DE FICHA
		char jugador = fase2.contador % 2 != 0 ? char(04) : char(05);
		if (PUEDE_HACER_MOVIMIENTO(jugador)) {
		}
		else {
			fase2.contador++;
			string nombre = jugador == char(04) ? "JUGADOR 1" : "JUGADOR 2";
			MOSTRAR_VALIDACIONES(" SE OBLIGO A TERMINAR EL TURNO DEL " + nombre + " PORQUE NO PODIA MOVER ALGUNA FICHA");
		}
		tecla = _getch(); tecla = toupper(tecla);

		if (tecla != 13) {

			if (ficha[*y][*x] == char(04)) colour = jugadores.color1;
			if (ficha[*y][*x] == char(05))  colour = jugadores.color2;
			if (*temp_position_x != 0 && *temp_position_y != 0 && *y == *temp_position_y && *x == *temp_position_x) colour = red;

			Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << ficha[*y][*x]; colour = white;

			if (esta_ficha_seleccionada == false) MOVIMIENTO(x, y, tecla);
			else MOVIMIENTO_FICHA_SELECCIONADA(temp_position_x, temp_position_y, x, y, tecla);

		}
		else {

			char ficha_seleccionada = ficha[*y][*x];

			if (esta_ficha_seleccionada == true || ficha_seleccionada != char(32)) {

				Console::SetCursorPosition(0, 23 + initial_position_tablero_y);
				cout << "                                                                                     ";

				if (esta_ficha_seleccionada == false) {
					//CUANDO SE SELECCIONA LA FICHA A MOVER
					if ((ficha_seleccionada == char(04) && fase2.contador % 2 != 0) ||
						(ficha_seleccionada == char(05) && fase2.contador % 2 == 0)) {
						Console::SetCursorPosition(*x, *y + initial_position_tablero_y);
						colour = red;
						cout << ficha_seleccionada;
						esta_ficha_seleccionada = true;
						*temp_position_y = *y;
						*temp_position_x = *x;
						jugador = ficha_seleccionada;
					}
					else MOSTRAR_VALIDACIONES(" NO PUEDE SELECCIONAR LA FICHA DE OTRO JUGADOR");
				}
				else {
					//CUANDO SE UBICA LA POSICION A DONDE SE DESEA MOVER

					if (ficha_seleccionada == char(32)) {
						//CUANDO LA POSICION ES UN ESPACIO VACIO
						if (jugador == char(04)) {
							//JUGADOR 1
							fase2.mover1++;
							colour = jugadores.color1;
						}
						else {
							//JUGADOR 2
							fase2.mover2++;
							colour = jugadores.color2;
						}

						ficha[*y][*x] = jugador;
						ficha[*temp_position_y][*temp_position_x] = char(32);

						Console::SetCursorPosition(*x, *y + initial_position_tablero_y); cout << jugador;
						Console::SetCursorPosition(*temp_position_x, *temp_position_y + initial_position_tablero_y); cout << char(32);

						fase2.contador++;
						CAPTURAR(x, y, jugador);

						*temp_position_x = 0;
						*temp_position_y = 0;
						esta_ficha_seleccionada = false;
						jugador = char(32);

						if (fase2.ficha2 == 0 || fase2.ficha1 == 0) break;
					}
					else if (*temp_position_y == *y && *temp_position_x == *x) {
						//PARA DESELECCIONAR LA FICHA SELECCIONADA
						if (jugador == char(04)) {
							//JUGADOR 1
							colour = jugadores.color1;
						}
						else {
							//JUGADOR 2
							colour = jugadores.color2;
						}
						Console::SetCursorPosition(*x, *y + initial_position_tablero_y);
						cout << ficha_seleccionada;

						*temp_position_x = 0;
						*temp_position_y = 0;
						esta_ficha_seleccionada = false;
						jugador = char(32);
					}
					else MOSTRAR_VALIDACIONES(" DEBE SELECCIONAR UN ESPACIO EN BLANCO PARA MOVER LA FICHA");
				}
			}
			else MOSTRAR_VALIDACIONES(" NO PUEDE SELECCIONAR UN ESPACIO EN BLANCO");
		}
	}
	MOSTRAR_GANADOR();
}

void iniciar_juego(int* x, int* y) {

	instrucciones();
	system("cls");

	DATOS();
	llenar_Fichas();
	MOSTRAR_TABLERO(x, y);

	FASE_1(x, y);
	FASE_2(x, y);

	system("cls");
}

int main() {

	bool next = true; int nextcontador = 1;
	char* opcion = new char;

	Console::CursorVisible = false;
	Console::SetWindowSize(124, 30);
	Logo_UPC(); getch(); colaboradores();
	creditos1(); creditos2(); creditos3();
	getch(); system("cls");

	while (true) {
		Console::SetWindowSize(124, 35);
		Segga(); Start_Game();
		next = true;
		//MENU DE OPCIONES
		while (next == true) {

			//SIGUIENTE
			*opcion = getch();
			if (*opcion == abajo) { nextcontador++;	if (nextcontador == 5) { nextcontador = 1; } }
			if (*opcion == arriba) { nextcontador--; if (nextcontador == 0) { nextcontador = 4; } }
			if (nextcontador == 1) { Start_Game(); }//JUGAR
			if (nextcontador == 2) { Rules(); }//REGLAS
			if (nextcontador == 3) { Credits(); }//CREDITOS
			if (nextcontador == 4) { Exit(); }//SALIR
			if (*opcion == enter) {

				if (nextcontador == 1) {
					//START GAME
					Console::SetWindowSize(120, 34);
					int* x = new int; *x = 0;
					int* y = new int; *y = 0 + initial_position_tablero_y;
					system("cls"); iniciar_juego(x, y);
				}
				if (nextcontador == 2) {
					//RULES
					Console::SetWindowSize(120, 30);
					reglas(); instrucciones(); system("cls");
				}
				if (nextcontador == 3) {
					//CREDITS
					Console::SetWindowSize(120, 30);
					system("cls"); colaboradores();
					creditos1(); creditos2(); creditos3();
					getch();
				}
				if (nextcontador == 4) {
					//EXIT
					exit(0);
				}
				next = false; nextcontador = 1;
			}
		}
	}
	getch;
}